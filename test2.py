# -*- coding: utf-8 -*-
"""test2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zxn8MjMskHlpwKngunVj_fOLk02KAvAL
"""

# -*- coding: utf-8 -*-
import streamlit as st
import os
import json
from datetime import datetime

# ========== 初期設定 ==========
USER_FILE = "users.json"
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

# ========== ユーザー管理 ==========
def load_users():
    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(USER_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=2, ensure_ascii=False)

# ========== ログ記録 ==========
def write_log(message):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_path = os.path.join(LOG_DIR, "IDlogin.txt")
    with open(log_path, "a", encoding="utf-8") as f:
        f.write(f"[{now}] {message}\n")

# ========== ログイン機能 ==========
if "page" not in st.session_state:
    st.session_state.page = "login"
if "user_id" not in st.session_state:
    st.session_state.user_id = None

users = load_users()

def login_page():
    st.title("🔐 ログインページ")

    id_input = st.text_input("ユーザーID", key="login_id_input")
    pw_input = st.text_input("パスワード", type="password", key="login_pw_input")

    if st.button("ログイン", key="login_button"):
        if id_input in users and users[id_input] == pw_input:
            st.session_state.page = "main"
            st.session_state.user_id = id_input
            write_log(f"ログイン: {id_input}")
            st.success(f"{id_input} さん、ようこそ！")
            st.rerun()
        else:
            st.error("IDまたはパスワードが間違っています。")

    st.markdown("---")
    if st.button("初回登録", key="to_register_button"):
        st.session_state.page = "register"
        st.rerun()

def register_page():
    st.title("📝 初回登録ページ")
    new_id = st.text_input("新しいユーザーID", key="register_id_input")
    new_pw = st.text_input("パスワードを入力", type="password", key="register_pw_input")

    if st.button("登録", key="register_button"):
        if new_id in users:
            st.error("このIDはすでに登録されています。")
        elif not new_id or not new_pw:
            st.error("IDとパスワードを入力してください。")
        else:
            users[new_id] = new_pw
            save_users(users)
            st.success("登録が完了しました！ログイン画面に戻ります。")
            st.session_state.page = "login"
            st.rerun()

    if st.button("ログイン画面に戻る", key="to_login_button"):
        st.session_state.page = "login"
        st.rerun()

# ========== メインページ ==========
def main_page():
    st.sidebar.write(f"👤 ログイン中: {st.session_state.user_id}")
    if st.sidebar.button("ログアウト"):
        write_log(f"ログアウト: {st.session_state.user_id}")
        st.session_state.page = "login"
        st.session_state.user_id = None
        st.warning("ログアウトしました。")
        st.rerun()

    st.title("ファイルアップロードと条件記録ツール")

    # --- 入力エリア ---
    st.header("① ファイルをアップロード")
    program = st.file_uploader("Javaプログラム（.java）をアップロード", type=["java"], accept_multiple_files=True)
    testcase = st.file_uploader("テストケース（任意）", type=["java"], accept_multiple_files=True)

    # --- 条件選択 ---
    st.header("② 条件を選択")
    test_opt = st.radio("テストケースの有無", ["あり", "なし"], horizontal=True)
    error_opt = st.selectbox("指摘するエラー数", ["１つだけ", "できるだけたくさん", "指定なし"])
    level_opt = st.radio("解説レベル", ["初級", "中級", "上級"], horizontal=True)

    # --- ログ記録ボタン ---
    if st.button("記録を保存"):
        if not program:
            st.error("Javaプログラムをアップロードしてください。")
        else:
            program_names = [p.name for p in program]
            test_names = [t.name for t in testcase] if testcase else []

            # ファイル名と選択条件をログに記録
            log_path = os.path.join(LOG_DIR, f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{st.session_state.user_id}.txt")
            with open(log_path, "w", encoding="utf-8") as f:
                f.write(f"[ユーザー]: {st.session_state.user_id}\n")
                f.write(f"[日時]: {datetime.now()}\n")
                f.write("=== 入力情報 ===\n")
                f.write(f"[プログラムファイル]: {', '.join(program_names)}\n")
                f.write(f"[テストファイル]: {', '.join(test_names) or 'なし'}\n")
                f.write(f"[テスト有無]: {test_opt}\n")
                f.write(f"[エラー数指定]: {error_opt}\n")
                f.write(f"[解説レベル]: {level_opt}\n")

            st.success("アップロード情報をログに記録しました！")
            st.info(f"保存先: {log_path}")

def view_logs_page():
    st.title("📜 ログ閲覧ページ")

    log_files = sorted(os.listdir(LOG_DIR))
    if not log_files:
        st.warning("ログがまだありません。")
        return

    # ログファイル一覧を選択
    selected_log = st.selectbox("表示するログファイルを選択", log_files)

    if st.button("ログを表示"):
        log_path = os.path.join(LOG_DIR, selected_log)
        with open(log_path, "r", encoding="utf-8") as f:
            content = f.read()
        st.text_area("ログ内容", content, height=400)

    if st.sidebar.button("メインページに戻る"):
        st.session_state.page = "main"
        st.rerun()


# ========== ページ遷移制御 ==========
if st.session_state.page == "login":
    login_page()
elif st.session_state.page == "register":
    register_page()
elif st.session_state.page == "main":
    main_page()